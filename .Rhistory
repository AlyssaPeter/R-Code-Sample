group_by(Study_Specific_Location_ID) %>%
summarize(correlation = cor(`E. coli`, `Total Phosphorus`, use = "complete.obs"),
p_value = cor.test(`E. coli`, `Total Phosphorus`, method = "pearson")$p.value)
# Filter for relevant parameters
filtered_df <- new_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus"))
# Create pairs based on Field_Collection_Start_Date and Study_Specific_Location_ID
paired_data <- filtered_df %>%
group_by(Study_Specific_Location_ID, Field_Collection_Start_Date) %>%
filter(n() == 2) %>%
pivot_wider(names_from = Result_Parameter_Name, values_from = Result_Value)
# Remove groups that do not have both parameters
paired_data <- paired_data %>%
filter(!is.na(`E. coli`) & !is.na(`Total Phosphorus`))
valid_data <- paired_data %>% group_by(Study_Specific_Location_ID) %>% filter(n() > 1) %>% summarise(correlation = ifelse(n() > 1, cor(`E. coli`, `Total Phosphorus`, use = "complete.obs"), NA), p_value = ifelse(n() > 1, cor.test(`E. coli`, `Total Phosphorus`, method = "pearson")$p.value, NA))
# Output the results
#print(association_tests)
print(valid_data)
filtered_df
filtered_df$Result_Parameter_Name
paired_data
# Create pairs based on Field_Collection_Start_Date and Study_Specific_Location_ID
paired_data <- filtered_df %>% group_by(Study_Specific_Location_ID, Field_Collection_Start_Date) %>% filter(n() >= 2) %>% pivot_wider(names_from = Result_Parameter_Name, values_from = Result_Value)
# Remove groups that do not have both parameters
paired_data <- paired_data %>%
filter(!is.na(`E. coli`) & !is.na(`Total Phosphorus`))
valid_data <- paired_data %>% group_by(Study_Specific_Location_ID) %>% filter(n() > 1) %>% summarise(correlation = ifelse(n() > 1, cor(`E. coli`, `Total Phosphorus`, use = "complete.obs"), NA), p_value = ifelse(n() > 1, cor.test(`E. coli`, `Total Phosphorus`, method = "pearson")$p.value, NA))
# Output the results
#print(association_tests)
print(valid_data)
# Create pairs based on Field_Collection_Start_Date and Study_Specific_Location_ID
paired_data <- filtered_df %>% group_by(Study_Specific_Location_ID, Field_Collection_Start_Date) %>% filter(n() >= 2) %>% pivot_wider(names_from = Result_Parameter_Name, values_from = Result_Value)
valid_data <- paired_data %>% group_by(Study_Specific_Location_ID) %>% filter(n() > 1) %>% summarise(correlation = ifelse(n() > 1, cor(`E. coli`, `Total Phosphorus`, use = "complete.obs"), NA), p_value = ifelse(n() > 1, cor.test(`E. coli`, `Total Phosphorus`, method = "pearson")$p.value, NA))
View(paired_data)
View(paired_data)
# Filter for relevant parameters
filtered_df <- df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus"))
# Create pairs based on Field_Collection_Start_Date and Study_Specific_Location_ID
paired_data <- filtered_df %>%
group_by(Study_Specific_Location_ID, Field_Collection_Start_Date) %>%
filter(n() >= 2) %>%
pivot_wider(names_from = Result_Parameter_Name, values_from = Result_Value)
# Ensure that each row has both E. coli and Total Phosphorus
paired_data <- paired_data %>%
filter(!is.na(`E. coli`) & !is.na(`Total Phosphorus`))
# Calculate correlation and p-value for each group where valid data exists
valid_data <- paired_data %>%
group_by(Study_Specific_Location_ID) %>%
summarise(
correlation = cor(`E. coli`, `Total Phosphorus`, use = "complete.obs"),
p_value = cor.test(`E. coli`, `Total Phosphorus`, method = "pearson")$p.value
)
# Filter dataframe for Study_Specific_Location_ID = BLA001
new_df <- df %>%
filter(study_specific_location_id == "BLA001")
# Filter dataframe for Study_Specific_Location_ID = BLA001
BLA001_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA001")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA001_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
filter(n() > 1) %>%
pivot_wider(names_from = Result_Parameter_Name, values_from = Result_Value) %>%
filter(!is.na(`E. coli`) & !is.na(`Total Phosphorus`))
# Scatterplot of pairs
ggplot(paired_df, aes(x = `E. coli`, y = `Total Phosphorus`)) +
geom_point() +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus")
# Test for strength of association (correlation test)
cor_test <- cor.test(paired_df$`E. coli`, paired_df$`Total Phosphorus`)
# Filter dataframe for Study_Specific_Location_ID = BLA001
BLA001_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA001")
# Filter dataframe for Study_Specific_Location_ID = BLA001
BLA001_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA001")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA001_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Ralue[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Filter dataframe for Study_Specific_Location_ID = BLA001
BLA001_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA001")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA001_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Scatterplot of pairs
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus")
# Filter dataframe for Study_Specific_Location_ID = BLA001
BLA001_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA001")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA001_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Calculate correlation coefficient
cor_coef <- cor(paired_df$E_coli, paired_df$Total_Phosphorus, use = "complete.obs")
# Add correlation to the ggplot
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
annotate("text", x = Inf, y = Inf, label = sprintf("Correlation: %.2f", cor_coef),
hjust = 1.1, vjust = 1.1, size = 5, color = "red") +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus with Correlation")
# Filter dataframe for Study_Specific_Location_ID = BLA001
BLA002_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA002")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA002_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Calculate correlation coefficient
cor_coef <- cor(paired_df$E_coli, paired_df$Total_Phosphorus, use = "complete.obs")
# Add correlation to the ggplot
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
annotate("text", x = Inf, y = Inf, label = sprintf("Correlation: %.2f", cor_coef),
hjust = 1.1, vjust = 1.1, size = 5, color = "red") +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus with Correlation (BLA002)")
# Filter dataframe for Study_Specific_Location_ID = BLA003
BLA003_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA003")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA003_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Calculate correlation coefficient
cor_coef <- cor(paired_df$E_coli, paired_df$Total_Phosphorus, use = "complete.obs")
# Add correlation to the ggplot
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
annotate("text", x = Inf, y = Inf, label = sprintf("Correlation: %.2f", cor_coef),
hjust = 1.1, vjust = 1.1, size = 5, color = "red") +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus with Correlation (BLA003)")
# Filter dataframe for Study_Specific_Location_ID = BLA004
BLA004_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA004")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA004_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Calculate correlation coefficient
cor_coef <- cor(paired_df$E_coli, paired_df$Total_Phosphorus, use = "complete.obs")
# Add correlation to the ggplot
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
annotate("text", x = Inf, y = Inf, label = sprintf("Correlation: %.2f", cor_coef),
hjust = 1.1, vjust = 1.1, size = 5, color = "red") +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus with Correlation (BLA004)")
# Filter dataframe for Study_Specific_Location_ID = BLA005
BLA005_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA005")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA005_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Calculate correlation coefficient
cor_coef <- cor(paired_df$E_coli, paired_df$Total_Phosphorus, use = "complete.obs")
# Add correlation to the ggplot
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
annotate("text", x = Inf, y = Inf, label = sprintf("Correlation: %.2f", cor_coef),
hjust = 1.1, vjust = 1.1, size = 5, color = "red") +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus with Correlation (BLA005)")
# Filter dataframe for Study_Specific_Location_ID = BLA006
BLA006_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA006")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA006_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Calculate correlation coefficient
cor_coef <- cor(paired_df$E_coli, paired_df$Total_Phosphorus, use = "complete.obs")
# Add correlation to the ggplot
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
annotate("text", x = Inf, y = Inf, label = sprintf("Correlation: %.2f", cor_coef),
hjust = 1.1, vjust = 1.1, size = 5, color = "red") +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus with Correlation (BLA006)")
# Filter dataframe for Study_Specific_Location_ID = BLA007
BLA007_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA002")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA007_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Calculate correlation coefficient
cor_coef <- cor(paired_df$E_coli, paired_df$Total_Phosphorus, use = "complete.obs")
# Add correlation to the ggplot
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
annotate("text", x = Inf, y = Inf, label = sprintf("Correlation: %.2f", cor_coef),
hjust = 1.1, vjust = 1.1, size = 5, color = "red") +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus with Correlation (BLA007)")
# Filter dataframe for Study_Specific_Location_ID = BLA009
BLA009_df <- new_df %>%
filter(Study_Specific_Location_ID == "BLA009")
# Pair records of E. coli and Total Phosphorus based on Field_Collection_Start_Date
paired_df <- BLA009_df %>%
filter(Result_Parameter_Name %in% c("E. coli", "Total Phosphorus")) %>%
group_by(Field_Collection_Start_Date) %>%
summarise(
E_coli = sum(Result_Value[Result_Parameter_Name == "E. coli"]),
Total_Phosphorus = sum(Result_Value[Result_Parameter_Name == "Total Phosphorus"])
) %>%
filter(E_coli > 0 & Total_Phosphorus > 0)
# Calculate correlation coefficient
cor_coef <- cor(paired_df$E_coli, paired_df$Total_Phosphorus, use = "complete.obs")
# Add correlation to the ggplot
ggplot(paired_df, aes(x = E_coli, y = Total_Phosphorus)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
annotate("text", x = Inf, y = Inf, label = sprintf("Correlation: %.2f", cor_coef),
hjust = 1.1, vjust = 1.1, size = 5, color = "red") +
labs(x = "E. coli (CFU or MPN per 100 mL)", y = "Total Phosphorus (mg/L)",
title = "Scatterplot of E. coli vs Total Phosphorus with Correlation (BLA009)")
# Install and load the required version of the 'xfun' package
install.packages("xfun", dependencies = TRUE)
library(xfun)
install.packages("xfun", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
write.csv(new_df, file="O:/EH_Health/Surface Water/+ PIC/Projects/Black Lake Grant 2022-25/Data/Black_Lake_Data_Prepped.csv", row.names=FALSE)
write.csv(new_df, file="O:/EH_Health/Surface Water/+ PIC/Black Lake Grant 2022-25/Data/Black_Lake_Data_Prepped.csv", row.names=FALSE)
save(new_df, file="J:/Git_WS/R-Code-Sample/Inputs/new_df.rda")
dir.create("O:/EH_Health/Surface Water/+ PIC/Black Lake Grant 2022-25/Data", recursive = TRUE, showWarnings = FALSE)
write.csv(new_df, file="O:/EH_Health/Surface Water/+ PIC/Black Lake Grant 2022-25/Data/Black_Lake_Data_Prepped.csv", row.names=FALSE)
# Filter the data for E. coli
df_ecoli <- new_df %>%
filter(Result_Parameter_Name == "E. coli") %>%
filter(Study_Specific_Location_ID %in% c("BLA001", "BLA002", "BLA003", "BLA004",
"BLA005", "BLA006", "BLA007", "BLA008", "BLA009"))
# Create a new dataframe with the specified conditions
new_df <- df[!(df$Result_Data_Qualifier == "REJ" | df$Sample_Replicate_Flag == "Y"), ]
##Convert date class
new_df$Field_Collection_Start_Date
new_df <- new_df %>%
mutate(Field_Collection_Start_Date = mdy(Field_Collection_Start_Date))
library(dplyr)
# Create a new dataframe with the specified conditions
new_df <- df[!(df$Result_Data_Qualifier == "REJ" | df$Sample_Replicate_Flag == "Y"), ]
##Convert date class
new_df$Field_Collection_Start_Date
new_df <- new_df %>%
mutate(Field_Collection_Start_Date = mdy(Field_Collection_Start_Date))
library(ggplot2)
library(plotly)
library(plyr)
library(flexdashboard)
library(tidyverse)
library(lubridate)
library(leaflet)
library(htmltools)
library(leaflet.extras)
library(leaflet.providers)
library(datasets)
library(sf)
library(crosstalk)
library(dplyr)
library(reactable)
library(mapview)
library(httr)
library(bslib)
library(xfun)
library(dplyr)
#Plotly
devtools::install_github("ropensci/plotly")
library(plotly)
library(ggplot2)
library(plyr)
library(flexdashboard)
library(tidyverse)
library(lubridate)
library(leaflet)
library(htmltools)
library(leaflet.extras)
library(leaflet.providers)
library(datasets)
library(sf)
library(crosstalk)
library(dplyr)
library(reactable)
library(mapview)
library(httr)
library(bslib)
library(xfun)
# Create a new dataframe with the specified conditions
new_df <- df[!(df$Result_Data_Qualifier == "REJ" | df$Sample_Replicate_Flag == "Y"), ]
##Convert date class
new_df$Field_Collection_Start_Date
new_df <- new_df %>%
mutate(Field_Collection_Start_Date = mdy(Field_Collection_Start_Date))
head(new_df)
new_df$Field_Collection_Start_Date
new_df$Season <- ifelse(format(as.Date(new_df$Field_Collection_Start_Date), "%m") %in% c("05", "06", "07", "08", "09"), "Dry", "Wet")
new_df
save(new_df, file="J:/Git_WS/R-Code-Sample/Inputs/new_df.rda")
dir.create("O:/EH_Health/Surface Water/+ PIC/Black Lake Grant 2022-25/Data", recursive = TRUE, showWarnings = FALSE)
write.csv(new_df, file="O:/EH_Health/Surface Water/+ PIC/Black Lake Grant 2022-25/Data/Black_Lake_Data_Prepped.csv", row.names=FALSE)
# Plot numeric distributions of Result_Value by Result_Parameter_Name
ggplot(new_df, aes(x = Result_Value)) +
geom_histogram(bins = 30) +
facet_wrap(~Result_Parameter_Name, scales = "free_x") +
theme_minimal() +
xlab("Result Value") +
ylab("Frequency") +
ggtitle("Distributions of Result Value by Parameter Name")
##check normality
# Check the normality of Result_Value by Result_Parameter_Name using QQ plots
ggplot(new_df, aes(sample = Result_Value)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~Result_Parameter_Name) +
theme_minimal() +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("QQ Plots of Result Value by Parameter Name")
# Filter the data for E. coli
df_ecoli <- new_df %>%
filter(Result_Parameter_Name == "E. coli") %>%
filter(Study_Specific_Location_ID %in% c("BLA001", "BLA002", "BLA003", "BLA004",
"BLA005", "BLA006", "BLA007", "BLA008", "BLA009"))
# Create a boxplot of Result_Value by Study_Specific_Location_ID and by Season using plotly
p <- plot_ly(data = df_ecoli, x = ~Study_Specific_Location_ID, y = ~Result_Value, color = ~Season, type = "box") %>%
layout(yaxis = list(title = "E.coli (MPN/100mL)"),
xaxis = list(title = "Site"),
boxmode = "group",
legend = list(title = list(text = "Season")),
plot_bgcolor = "white",
paper_bgcolor = "white")
# Make the boxplot look pretty
p <- p %>%
layout(font = list(family = "Arial, sans-serif", size = 12, color = "#000"),
margin = list(l = 40, r = 30, b = 80, t = 40, pad = 4))
# Show the plot
p
# Create a boxplot of Result_Value by Study_Specific_Location_ID and by Season using plotly
p <- plot_ly(data = df_ecoli, x = ~Study_Specific_Location_ID, y = ~Result_Value, color = ~Season, type = "box") %>%
layout(yaxis = list(title = "E.coli (MPN/100mL)"),
xaxis = list(title = "Site"),
boxmode = "group",
legend = list(title = list(text = "Season")),
plot_bgcolor = "white",
paper_bgcolor = "white")
# Make the boxplot look pretty
p <- p %>%
layout(font = list(family = "Arial, sans-serif", size = 12, color = "#000"),
margin = list(l = 40, r = 30, b = 80, t = 40, pad = 4))
# Show the plot
p
saveWidget(p,"p.html")
install.packages("htmlwidgets")
saveWidget(p,"p.html")
knitr::opts_chunk$set(echo = TRUE)
library(htmlwidgets)
saveWidget(p,"p.html")
htmlwidgets::saveWidget(p, file = "J:/Black Lake/Plots/April2024 Assignment/boxplot.html")
library(shiny)
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel("Black Lake Project App"),
# Show a plotly output
plotlyOutput("plot")
)
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel("Black Lake Project App"),
# Show a plotly output
p("plot")
)
# Define server logic
server <- function(input, output) {
output$plot <- renderPlotly({
p
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application
ui <- fluidPage( # Application title
titlePanel("Plotly Graph in Shiny App"),
# Show a plotly output
plotlyOutput("plot") )
# Define UI for application
ui <- fluidPage( # Application title
titlePanel("Plotly Graph in Shiny App"),
# Show a plotly output
p("plot") )
# Define server logic
server <- function(input, output) {
output$plot <- renderPlotly({
# Assuming 'p' is already a plotly object created outside this app
p }) }
# Run the application
shinyApp(ui = ui, server = server)
r library(shiny)
library(shiny)
# Define UI for application
ui <- fluidPage( # Application title
titlePanel("Plotly Graph in Shiny App"),
# Show a plotly output
plotlyOutput("plot") )
ui<-fluidPage(
titlePanel("Black Lake Routine Monitoring"),
mainPanel(plotlyOutput("E. coli Concentrations at Black Lake Sites"))
)
# Define UI for application
ui <- fluidPage( # Application title
titlePanel("Black Lake Routine Sites"),
# Show a plotly output
plotlyOutput("plot") )
library(shiny)
library(plotly)
# Define UI for application
ui <- fluidPage( # Application title
titlePanel("Black Lake Routine Sites"),
# Show a plotly output
plotlyOutput("plot") )
# Define server logic
server <- function(input, output) {
output$plot <- renderPlotly({
# Assuming 'p' is already a plotly object created outside this app
p }) }
# Run the application
shinyApp(ui = ui, server = server)
library(ggplot2)
library(plotly)
library(plyr)
library(flexdashboard)
library(tidyverse)
library(lubridate)
library(leaflet)
library(htmltools)
library(leaflet.extras)
library(leaflet.providers)
library(datasets)
library(sf)
library(crosstalk)
library(dplyr)
library(reactable)
library(mapview)
library(httr)
library(bslib)
library(xfun)
#Plotly
devtools::install_github("ropensci/plotly")
